/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Ufal.Parsito {

using System;
using System.Runtime.InteropServices;

public class Tree : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Tree(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Tree obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Tree() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          parsito_csharpPINVOKE.delete_Tree(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Tree() : this(parsito_csharpPINVOKE.new_Tree(), true) {
  }

  public Nodes nodes {
    set {
      parsito_csharpPINVOKE.Tree_nodes_set(swigCPtr, Nodes.getCPtr(value));
    } 
    get {
      IntPtr cPtr = parsito_csharpPINVOKE.Tree_nodes_get(swigCPtr);
      Nodes ret = (cPtr == IntPtr.Zero) ? null : new Nodes(cPtr, false);
      return ret;
    } 
  }

  public bool empty() {
    bool ret = parsito_csharpPINVOKE.Tree_empty(swigCPtr);
    return ret;
  }

  public void clear() {
    parsito_csharpPINVOKE.Tree_clear(swigCPtr);
  }

  public Node addNode(string form) {
    Node ret = new Node(parsito_csharpPINVOKE.Tree_addNode(swigCPtr, form), false);
    if (parsito_csharpPINVOKE.SWIGPendingException.Pending) throw parsito_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setHead(int id, int head, string deprel) {
    parsito_csharpPINVOKE.Tree_setHead(swigCPtr, id, head, deprel);
    if (parsito_csharpPINVOKE.SWIGPendingException.Pending) throw parsito_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void unlinkAllNodes() {
    parsito_csharpPINVOKE.Tree_unlinkAllNodes(swigCPtr);
  }

  public static string root_form {
    get {
      string ret = parsito_csharpPINVOKE.Tree_root_form_get();
      return ret;
    } 
  }

}

}
